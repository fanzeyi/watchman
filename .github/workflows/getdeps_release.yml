# This file was @generated by getdeps.py

name: release

on:
  push:
    tags:
      - v*

jobs:
  prepare:
    runs-on: ubuntu-18.04
    outputs:
      release_name: ${{ steps.info.outputs.name }}
    steps:
    - name: Prepare release info
      id: info
      env:
        TAG: ${{ github.ref }}
      run: python -c "print('::set-output name=name::' + '$TAG'.lstrip('refs/tags/'))"
  linux-build:
    continue-on-error: true
    needs: prepare
    runs-on: ubuntu-18.04
    steps:
    - name: Mock Linux build
      run: mkdir -p _artifacts/linux/bin && echo "linux" > _artifacts/linux/bin/watchman
    - uses: actions/upload-artifact@master
      with:
        name: watchman-linux-${{ needs.prepare.outputs.release_name }}
        path: _artifacts
  mac-build:
    continue-on-error: true
    needs: prepare
    runs-on: macOS-latest
    steps:
    - name: Mock macOS build
      run: false
    - uses: actions/upload-artifact@master
      with:
        name: watchman-mac-${{ needs.prepare.outputs.release_name }}
        path: _artifacts
  windows-build:
    continue-on-error: true
    needs: prepare
    runs-on: windows-2016
    steps:
    - name: Mock Windows build
      run: mkdir -p _artifacts/windows/bin && echo "windows" > _artifacts/windows/bin/watchman.cmd
    - uses: actions/upload-artifact@master
      with:
        name: watchman-windows-${{ needs.prepare.outputs.release_name }}
        path: _artifacts

  release:
    needs: [prepare, linux-build, mac-build, windows-build]

    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1

    - name: Download artifact for Linux
      continue-on-error: true
      id: linux-download
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/download-artifact@v2
      with:
        name: watchman-linux-${{ needs.prepare.outputs.release_name }}

    - name: Download artifact for macOS
      continue-on-error: true
      id: mac-download
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/download-artifact@v2
      with:
        name: watchman-mac-${{ needs.prepare.outputs.release_name }}

    - name: Download artifact for Windows
      continue-on-error: true
      id: windows-download
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/download-artifact@v2
      with:
        name: watchman-windows-${{ needs.prepare.outputs.release_name }}

    - name: Create release
      id: create_release
      if: ${{ steps.linux-download.outcome == 'success' || steps.mac-download.outcome == 'success' || steps.windows-download.outcome == 'success' }}
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}

    - name: Create archive for Linux
      if: ${{  steps.linux-download.outcome == 'success' }}
      run: mv linux watchman-linux && zip -r watchman-${{ needs.prepare.outputs.release_name }}-linux.zip watchman-linux/
    - name: Upload Linux release
      if: ${{  steps.linux-download.outcome == 'success' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./watchman-${{ needs.prepare.outputs.release_name }}-linux.zip
        asset_name: watchman-${{ needs.prepare.outputs.release_name }}-linux.zip
        asset_content_type: application/zip

    - name: Create archive for macOS
      if: ${{  steps.mac-download.outcome == 'success' }}
      run: mv mac watchman-mac && zip -r watchman-${{ needs.prepare.outputs.release_name }}-darwin.zip watchman-mac/
    - name: Upload macOS release
      if: ${{  steps.mac-download.outcome == 'success' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./watchman-${{ needs.prepare.outputs.release_name }}-darwin.zip
        asset_name: watchman-${{ needs.prepare.outputs.release_name }}-darwin.zip
        asset_content_type: application/zip

    - name: Create archive for Windows
      if: ${{  steps.windows-download.outcome == 'success' }}
      run: mv windows watchman-windows && zip -r watchman-${{ needs.prepare.outputs.release_name }}-windows.zip watchman-windows/
    - name: Upload Windows release
      if: ${{  steps.windows-download.outcome == 'success' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./watchman-${{ needs.prepare.outputs.release_name }}-windows.zip
        asset_name: watchman-${{ needs.prepare.outputs.release_name }}-windows.zip
        asset_content_type: application/zip
